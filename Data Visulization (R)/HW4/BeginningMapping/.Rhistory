states_map = map_data("state")
ggplot(states_map, aes(x=long, y=lat, group=group)) +
geom_polygon(fill="white", color="black")
library(maps)
library(mapdata)
install.packages("maps")
install.packages("mapdata")
installed.packages("mapproj")
states_map = map_data("state")
library(maps)
library(mapdata)
library(ggplot2)
library(mapproj)
states_map = map_data("state")
ggplot(states_map, aes(x=long, y=lat, group=group)) +
geom_polygon(fill="white", color="black")
ggplot(states_map, aes(x=long, y=lat, group=group)) +
geom_path() + coord_map("mercator")
install.packages("mapproj")
library(mapproj)
ggplot(states_map, aes(x=long, y=lat, group=group)) +
geom_path() + coord_map("mercator")
ggplot(states_map, aes(x=long, y=lat, group=group)) +
geom_path() + coord_map("sinusoidal")
ggplot(states_map, aes(x=long, y=lat, group=group)) +
geom_path() + coord_map("gall")
ggplot(states_map, aes(x=long, y=lat, group=group)) +
geom_path() + coord_map("gall", 0)
ggplot(states_map, aes(x=long, y=lat, group=group)) +
geom_path() + coord_map("polyconic", 0)
ggplot(states_map, aes(x=long, y=lat, group=group)) +
geom_path() + coord_map("polyconic")
world_map = map_data("world")
ggplot(world_map, aes(x=long, y=lat, group=group)) +
geom_polygon(fill="white", color="black")
ggplot(states_map, aes(x=long, y=lat, group=group)) +
geom_path() + coord_map("azequidistant")
ggplot(world_map, aes(x=long, y=lat, group=group)) +
geom_path() + coord_map("azequidistant")
ggplot(world_map, aes(x=long, y=lat, group=group)) +
geom_path() + coord_map("rectangular", 0)
ggplot(world_map, aes(x=long, y=lat, group=group)) +
geom_path() + coord_map("rectangular", 10)
ggplot(world_map, aes(x=long, y=lat, group=group)) +
geom_path() + coord_map("rectangular", -90)
ggplot(states_map, aes(x=long, y=lat, group=group)) +
geom_path() + coord_map("mercator")
ggplot(world_map, aes(x=long, y=lat, group=group)) +
geom_path() + coord_map("mercator")
ggplot(world_map, aes(x=long, y=lat, group=group)) +
geom_path()
ggplot(states_map, aes(x=long, y=lat, group=group)) +
geom_path() + coord_map("sinusoidal")
ggplot(world_map, aes(x=long, y=lat, group=group)) +
geom_path() + coord_map("sinusoidal")
ggplot(states_map, aes(x=long, y=lat, group=group)) +
geom_path() + coord_map("gall", 0)
ggplot(world_map, aes(x=long, y=lat, group=group)) +
geom_path() + coord_map("gall", 0)
ggplot(world_map, aes(x=long, y=lat, group=group)) +
geom_path() + coord_map("polyconic")
map("worldHires", xlim=c(-180, 180), ylim=c(-80, 80), col="gray90", fill=T, projection="mollweide")
map("worldHires", xlim=c(-180, 180), ylim=c(-80, 80), col="gray90", fill=T, projection="mollweide")
world_map = map_data("worldHires")
ggplot(world_map, aes(x=long, y=lat, group=group)) +
geom_polygon(fill="white", color="black") + coord_map("mollweide")
?maps
help(package=maps)
world_map = map_data("world2")
# A version of the mercator projection seems to be the
# Default
ggplot(world_map, aes(x=long, y=lat, group=group)) +
geom_path()
# For some reason the world map likes to be given a
# -reference latitude of -90 here
ggplot(world_map, aes(x=long, y=lat, group=group)) +
geom_path() + coord_map("rectangular", -90)
# Some polygons bleed over with the mercator projection
# if manually applied
ggplot(world_map, aes(x=long, y=lat, group=group)) +
geom_path() + coord_map("mercator")
# Polygons bleed over as well with sinusoidal.  This is due
# to some polygons on alaska not being subdivided over
# the international date line.
ggplot(world_map, aes(x=long, y=lat, group=group)) +
geom_path() + coord_map("sinusoidal")
world_map = map_data("world2")
ggplot(world_map, aes(x=long, y=lat, group=group)) +
geom_path()
ggplot(world_map, aes(x=long, y=lat, group=group)) +
geom_path() + coord_map("rectangular", 0)
ggplot(world_map, aes(x=long, y=lat, group=group)) +
geom_path() + coord_map("mercator")
# This first
mp1 = fortify(map(fill=TRUE, plot=FALSE))
mp2 <- mp1
mp2$long <- mp2$long + 360
mp2$group <- mp2$group + max(mp2$group) + 1
mp <- rbind(mp1, mp2)
ggplot(aes(x = long, y = lat, group = group), data = mp) +
geom_path() +
scale_x_continuous(limits = c(0, 360))
ggplot(aes(x = long, y = lat, group = group), data = mp) +
geom_path() +
scale_x_continuous(limits = c(-180, 180))
ggplot(world_map, aes(x=long, y=lat, group=group)) +
geom_path()
world_map = map_data("world")
# A version of the mercator projection seems to be the
# Default
ggplot(world_map, aes(x=long, y=lat, group=group)) +
geom_path()
map(database= "worldHires", ylim=c(45,90), xlim=c(-160,-50), col="grey80", fill=TRUE, projection="gilbert", orientation= c(90,0,225))
coord = mapproject(lon, lat, proj="gilbert", orientation=c(90, 0, 225))  #convert points to projected lat/long
lon = c(-72, -66, -107, -154)  #fake longitude vector
lat = c(81.7, 64.6, 68.3, 60)  #fake latitude vector
coord = mapproject(lon, lat, proj="gilbert", orientation=c(90, 0, 225))  #convert points to projected lat/long
points(coord, pch=20, cex=2, col="red")  #plot converted points
ds = read.table("EpidemicOutbreaks.csv", header=T, sep=",")
head(ds)
map("world", xlim=c(-170, 170), ylim=c(-90, 90), col="gray90", fill=T,
projection="rectangular", parameters=0)
coord=mapproject(ds$Long, ds$Lat, projection="rectangular", parameters=0)
points(coord, cex=.5, col="red", pch=20)
# Let's use the same features to
map("world", xlim=c(-170, 170), ylim=c(-90, 90), col="gray90", fill=T,
projection="cylindrical", parameters=0)
# Let's use the same features to
map("world", xlim=c(-170, 170), ylim=c(-90, 90), col="gray90", fill=T,
projection="cylindrical", parameters=c(0))
# Let's use the same features to
map("world", xlim=c(-170, 170), ylim=c(-90, 90), col="gray90", fill=T,
projection="cylindrical", parameters=c("0"))
projection="mercator", parameters=0
# Let's use the same features to
map("world", xlim=c(-170, 170), ylim=c(-90, 90), col="gray90", fill=T,
projection="mercator", parameters=0)
# Let's use the same features to
map("world", xlim=c(-170, 170), ylim=c(-90, 90), col="gray90", fill=T,
projection="mercator")
# Let's use the same features to
map("world", xlim=c(-170, 170), ylim=c(-90, 90), col="gray90", fill=T,
projection="cylindrical")
# Let's use the same features to
map("world", xlim=c(-170, 170), ylim=c(-90, 90), col="gray90", fill=T,
projection="rectangular")
# Let's use the same features to
map("world", xlim=c(-170, 170), ylim=c(-90, 90), col="gray90", fill=T,
projection="rectangular", parameter=0)
# Let's use the same features to
map("world", xlim=c(-170, 170), ylim=c(-90, 90), col="gray90", fill=T,
projection="rectangular", parameters=0)
# Let's use the same features to
map("world", xlim=c(-170, 170), ylim=c(-90, 90), col="gray90", fill=T,
projection="rectangular", parameters=90)
# Let's use the same features to
map("world", xlim=c(-170, 170), ylim=c(-90, 90), col="gray90", fill=T,
projection="rectangular", parameters=180)
# Let's use the same features to project the sites of the outbreaks by
# their latitudes and longitudes
map("world", xlim=c(-170, 170), ylim=c(-90, 90), col="gray90", fill=T,
projection="rectangular", parameters=0)
coord=mapproject(ds$Long, ds$Lat, projection="rectangular", parameters=0)
points(coord, cex=.5, col="red", pch=20)
map("worldHires", xlim=c(-170, -60), ylim=c(20, 80), col="gray90", fill=T,
projection="rectangular", parameters=0)
map("worldHires", xlim=c(-170, -60), ylim=c(20, 80), col="gray90", fill=T,
projection="rectangular", parameters=0)
points(coord, cex=.5, col="red", pch=20)
coord=mapproject(ds$Long, ds$Lat, xlim=c(-170, -60), ylim=c(20, 80), projection="rectangular", parameters=0)
ds
ggplot(world_map, aes(x=long, y=lat, group=group)) +
geom_polygon(fill="white", color="black") +
geom_point(data=ds, aes(x=Long, y=Lat), color=as.numeric(ds$Cases))
# The dataset must have a group field for ggplot's mapping ...
# it can be set to a constant of 1 ... go figure
ds$group=1
ggplot(world_map, aes(x=long, y=lat, group=group)) +
geom_polygon(fill="white", color="black") +
geom_point(data=ds, aes(x=Long, y=Lat), color=as.numeric(ds$Cases))
ggplot(world_map, aes(x=long, y=lat, group=group)) +
geom_polygon(fill="white", color="black") +
geom_point(data=ds, aes(x=Long, y=Lat), color=as.numeric(ds$Cases))
ggplot(world_map, aes(x=long, y=lat, group=group)) +
geom_polygon(fill="white", color="black") +
geom_point(data=ds, aes(x=Long, y=Lat), color=as.numeric(ds$Cases)) +
scale_color_gradient(high="red", low="blue")
ggplot(world_map, aes(x=long, y=lat, group=group)) +
geom_polygon(fill="white", color="black") +
geom_point(data=ds, aes(x=Long, y=Lat), color=ds$Cases) +
scale_color_gradient(high="red", low="green")
geom_point(data=ds, aes(x=Long, y=Lat, color=as.numeric(ds$Cases)) +
ggplot(world_map, aes(x=long, y=lat, group=group)) +
geom_polygon(fill="white", color="black") +
geom_point(data=ds, aes(x=Long, y=Lat, color=as.numeric(ds$Cases))) +
scale_color_gradient(high="red", low="green")
# Notice that we have a location field that mostly has country names
ds = read.table("EpidemicOutbreaks.csv", header=T, sep=",")
head(ds)
# Notice that we have a location field that mostly has country names
ds = read.table("EpidemicOutbreaks.csv", header=T, sep=",")
head(ds)
# Now, we can map it.  Notice that we have to have two sets of Aesthetics here
# one for the base world map and one for the
ggplot(world_map, aes(x=long, y=lat, group=group)) +
geom_polygon(fill="white", color="black") +
geom_point(data=ds, aes(x=Long, y=Lat, color=Cases))
# The dataset must have a group field for ggplot's mapping.  For the moment
# it can be set to a constant of 1 because we are not mapping to color on the
# polygons
ds$group=1
# Now, we can map it.  Notice that we have to have two sets of Aesthetics here
# one for the base world map and one for the
ggplot(world_map, aes(x=long, y=lat, group=group)) +
geom_polygon(fill="white", color="black") +
geom_point(data=ds, aes(x=Long, y=Lat, color=Cases))
# Now, we can map it.  Notice that we have to have two sets of Aesthetics here
# one for the base world map and one for the
ggplot(world_map, aes(x=long, y=lat, group=group)) +
geom_polygon(fill="white", color="black") +
geom_point(data=ds, aes(x=Long, y=Lat, color=as.numeric(Cases)))
# The "cases" doesn't come in as a number for some reason. Instead it comes
# in as a categorical factor, so we convert it
ds$Cases = as.numeric(ds$Cases)
# Now, we can map it.  Notice that we have to have two sets of Aesthetics here
# one for the base world map and one for the points.
ggplot(world_map, aes(x=long, y=lat, group=group)) +
geom_polygon(fill="white", color="black") +
geom_point(data=ds, aes(x=Long, y=Lat, color=Cases))
# Or we
ggplot(world_map, aes(x=long, y=lat, group=group)) +
geom_polygon(fill="white", color="black") +
geom_point(data=ds, aes(x=Long, y=Lat, color=ds$Cases)) +
scale_color_gradient(high="red", low="green")
states_map = map_data("state")
ggplot(states_map, aes(x=long, y=lat, group=group)) +
geom_polygon(fill="white", color="black")
# The USArrests dataset has row names that are the states, but for the
# map, we need to have a field with those names.  Moreover, the state
# names must be in lowercase.
crimes = data.frame(state=tolower(rownames(USArrests)), USArrests)
head(crimes)
head(states_map)
# The USArrests dataset has row names that are the states, but for the
# map, we need to have a field with those names.  Moreover, the state
# names must be in lowercase, so we have to convert
head(rownames(USArrests))
head(crimes)
# Now, we have to merge the two datasets by joining on the two common
# fields.  They are not named the same, but that is not an issue.  In
# the "states_map" the state field is called "region" and in our
# crime dataset, it is called "state"
crime_map = merge(states_map, crimes, by.x="region", by.y="state")
head(crime_map)
head(states_map)
# Notice that the "group" holds an ID of each state now, but the points
# for the first state of alabama are no longer in the same order!
head(crime_map)
head(states_map)
# We need to resort these for drawing since the polygon points have been resorted
# here by the merge command, unfortunately
library(plyr)
crime_map=arrange(crime_map, group, order)
head(crime_map)
# Now, let's draw it.
ggplot(crime_map, aes(x=long, y=lat, group=group, fill=Assault)) +
geom_polygon(color="black")
ggplot(crime_map, aes(x=long, y=lat, group=group, fill=Assault)) +
geom_polygon(color="black") + coord_map("polyconic")
# Now, let's draw it.
ggplot(crime_map, aes(x=long, y=lat, group=group, fill=Assault)) +
geom_polygon(color="black") + scale_fill_gradient(low="lightgreen", high="pink")
ggplot(crime_map, aes(x=long, y=lat, group=group, fill=Assault)) +
geom_polygon(color="black") + coord_map("mercator") +
scale_fill_gradient(low="lightgreen", high="pink")
# The geom_map geometry type is a wrapper for the geom_polygon
# type, but which is optimized for maps
ggplot(crimes, aes(map_id=state, fill=Assault)) +
geom_map(map=states_map, color="black") +
scale_fill_gradient2(low="#559999", mid="grey90", high="#BB650B",
midpoint=median(crimes$Assault)) +
expand_limits(x=states_map$long, y=states_map$lat) +
coord_map("polyconic")
ggplot(states_map, aes(x=long, y=lat, group=group)) +
geom_polygon(fill="white", color="black")
library(maps)
library(mapdata)
library(ggplot2)
library(mapproj)
library(plyr)
states_map = map_data("state")
ggplot(states_map, aes(x=long, y=lat, group=group)) +
geom_polygon(fill="white", color="black")
ggplot(states_map, aes(x=long, y=lat, group=group)) +
geom_path() + coord_map("mercator")
ggplot(states_map, aes(x=long, y=lat, group=group)) +
geom_path() + coord_map("sinusoidal")
ggplot(states_map, aes(x=long, y=lat, group=group)) +
geom_path() + coord_map("gall", 0)
ggplot(states_map, aes(x=long, y=lat, group=group)) +
geom_path() + coord_map("gall", 0)
ggplot(states_map, aes(x=long, y=lat, group=group)) +
geom_path() + coord_map("mercator")
ggplot(states_map, aes(x=long, y=lat, group=group)) +
geom_path() + coord_map("gall", 0)
ggplot(states_map, aes(x=long, y=lat, group=group)) +
geom_path() + coord_map("polyconic")
ggplot(states_map, aes(x=long, y=lat, group=group)) +
geom_path() + coord_map("gall", 0)
ggplot(states_map, aes(x=long, y=lat, group=group)) +
geom_path() + coord_map("sinusoidal")
ggplot(world_map, aes(x=long, y=lat, group=group)) +
geom_path() + coord_map("rectangular", -90)
ggplot(world_map, aes(x=long, y=lat, group=group)) +
geom_path() + coord_map("sinusoidal")
